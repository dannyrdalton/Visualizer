<div id="display-wrapper">
	<div id="visualizer-wrapper">
		<div id="circles" class="visualizer">
		</div>
		<div id="bars" class="visualizer">
		</div>
		<div id="balls" class="visualizer">
		</div>
	</div>
	<div id="controls-wrapper">
		<h1 class="visualizerName"><%= name %></h1>
		<a href="#" data-role="button" data-rel="back" data-icon="arrow-l" id="display-back-button">Back</a>
		<p id="display-instructions">Join this visualizer on a mobile device to contribute!</p>
		<a href="#" data-role="button" class="fullscreen-button" id="enter-fullscreen">Enter Full Screen</a>
		<a href="#" data-role="button" class="fullscreen-button" id="exit-fullscreen">Exit Full Screen</a>
		<div id="display-radio-wrapper">
			<a href="#circles" class="visualizer-radio" id="circles-link">Circles</a>
			<a href="#bars" class="visualizer-radio" id="bars-link">Bars</a>
			<a href="#balls" class="visualizer-radio" id="balls-link">Balls</a>
		</div>
	</div>
</div>

<script type="text/javascript">
var socket = io.connect(window.location.hostname);

/* VISUALIZER LOGIC */


var debug = 1;
var date;
var numInputs = 0,
	numCircles = 0,
	numBars = 0,
	numBalls = 0;

var currentType = '#circles';

var circleDiameter = 100;
var barWidth = 80;
var barHeight = 20;
var ballDiameter = 80;

var name = $('.visualizerName').html();
// Get visualizer type selection from app
socket.emit('requestType', { name : name });
socket.on('typeIs', function(data) {
	currentType = data.type;
	if (debug) {
		console.log('Server indicated type: ' + currentType);
	}
	changeVisualizerType();
});

// Initialize UI
$('#exit-fullscreen').hide();
$('#controls-wrapper').hide();
$('.visualizer').hide();
$(document).bind('pageload', function() {
	changeVisualizerType();
});
$(document).ready(function() {
	changeVisualizerType();
});

// Change visualizer type
function changeVisualizerType() {
	$('.visualizer').hide();
	$(currentType).show();
}

$('.visualizer-radio').click( function(e) {
	currentType = e.target.hash;
	changeVisualizerType();
	if (debug) {
		console.log('Visualizer changed to: ' + currentType);
	}
});

// Initialize Pusher
var pusher = new Pusher('1c0d1fc18d1af207286e');
var presenceChannel = pusher.subscribe('presence-' + name.replace(/[^a-z0-9\.]+/gi, "")); // Remove characters incompatible with Pusher

var inputs = [];
presenceChannel.bind('pusher:subscription_succeeded', function(members) {
	members.each(function(member) {
		if(member.id != members.me.id) {
			inputs.push(parseInt(member.id));
			if(debug) {
				console.log('Member ID #' + member.id + ' added.');
			}
			numInputs++;
		}
	});
	$('.visualizer').empty();
	renumberElements(numInputs);
});

presenceChannel.bind('pusher_internal:member_added', function(member) {
	inputs.push(parseInt(member.user_id));
	if(debug) {
		console.log('Member ID #' + member.user_id + ' added.');
	}
	numInputs++;
	renumberElements(numInputs);
});

presenceChannel.bind('pusher_internal:member_removed', function(member) {
	if(numInputs > 0) {
		inputs.splice(inputs.indexOf(parseInt(member.user_id)), 1);
		if(debug) {
			console.log('Member ID #' + member.user_id + ' removed.');
		}
		numInputs--;
		renumberElements();
	}
});

// Switch to fullscreen mode. Utilizes jquery.fullscreen.js
var isFullscreen;
$(document).on("fullscreenchange", function() {
   isFullscreen = !!$(document).fullScreen();
   $('#enter-fullscreen, #exit-fullscreen').toggle();
});
$('.fullscreen-button').click(function() {
	$(document).toggleFullScreen();
});

// Show controls on mouse move, tap
var mouseToggle = true;
var timerToggle = false;
var pauseToggle = false;
$(document).mousemove(function () {
	if(mouseToggle){
		mouseToggle = false;
		$('#controls-wrapper').fadeIn(200).removeClass('no-cursor');
	}
	
	var afterMouseStop = function () {
		mouseToggle = true;
	}
	
	var onMouseStop = function () {
		$('#controls-wrapper').fadeOut(200).addClass('no-cursor');
		clearTimeout(pauseToggle);
		pauseToggle = setTimeout(afterMouseStop, 500);
	};
	
	clearTimeout(timerToggle);
	timerToggle = setTimeout(onMouseStop, 800);
});

$('#visualizer-wrapper').bind('tap', function() {
	$('#controls-wrapper').fadeToggle(200);
});
$('#controls-wrapper').bind('tap', function() {
	$('#controls-wrapper').fadeToggle(200);
});
$("#controls-wrapper a").bind('tap', function(e) {
	e.stopPropagation();
});

function renumberElements() {
	renumberCircles();
	renumberBars();
	//renumberBalls();
}

function renumberCircles() {
	while(numCircles < numInputs) {
		$('#circles').append('<div class="circle" id="circle-'+numCircles+'"></div>')
		numCircles++;
	}
	while(numCircles > numInputs) {
		var removeIndex = numCircles - 1;
		$('#circle-'+ removeIndex).remove();
		numCircles--;
	}
	if(debug) {
		console.log('Number of inputs: ' + numInputs);
		console.log('Number of circles: ' + numCircles);
	}
	
	circleDiameter = 1 / Math.ceil((Math.sqrt(numCircles))) * $(document).width();
	$('.circle').width(circleDiameter);
	$('.circle').height(circleDiameter);
	$('.circle').hide();
}

function renumberBars(number) {
	while(numBars < numInputs) {
		$('#bars').append('<div class="bar" id="bar-'+numBars+'"></div>');
		numBars++;
	}
	while(numBars > numInputs) {
		var removeIndex = numBars - 1;
		$('#bar-'+ removeIndex).remove();
		numBars--;
	}
	if(debug) {
		console.log('Number of inputs: ' + numInputs);
		console.log('Number of bars: ' + numBars);
	}
	
	barWidth = 80 / (numBars);
	var barMargin = barWidth * .05;
	var actualWidth = barWidth * .9;
	console.log('New bar width: ' + barWidth);
	$('.bar').width(actualWidth+'%').height(barHeight + '%').css({'margin-right' : barMargin + '%', 'margin-left' : barMargin + '%'});
	var leftBarMargin = 10 + barMargin;
	$('#bar-0').css({ 'margin-left' : leftBarMargin + '%'});
}

/*
function renumberBalls(number) {
	console.log("Number of data inputs is ");
	console.log(numInputs);
	
	while(number > numCircles + 1) {
		$('#balls').append('<div class="circle" id="circle-'+numCircles+'"></div>');
		numCircles++;
		console.log(numCircles);
	}
	while(number < numCircles + 1) {
		var removeCircle = numCircles - 1;
		console.log("remove circle is ");
		console.log(removeCircle);
		$('#circle-'+removeCircle).remove();
		numCircles--;
	}
	if(debug) {
		console.log('Number of inputs: ' + number);
		console.log('Number of circles: ' + numCircles);
	}
	circleDiameter = ($(window).width() * 0.8) / numCircles;
	$('.circle').width(circleDiameter);
	$('.circle').height(circleDiameter);
	$('.circle').css({ '-webkit-border-radius' : 50+'%', '-moz-border-radius' : (circleDiameter/2)+'%' });

}
*/

presenceChannel.bind('client-tapped', function(data) {
	date = new Date();
	var latency = date.getTime() - data.timestamp;
	var elementIndex = inputs.indexOf(parseInt(data.id));
	if(debug) {
		console.log('Event received!');
		console.log('Client ID: ' + data.id);
		console.log('Latency: ' + latency);
		console.log(currentType);
	}
	if(currentType == '#circles'){
		visualizeCircle(data, elementIndex);
	}
	else if(currentType == '#bars'){
		visualizeBar(data, elementIndex);
	}
});

function visualizeCircle(data, elementIndex) {
	var circleX = data.xPos * ($('body').width() - $('.circle').width());
	var circleY = data.yPos * ($('body').height() - $('.circle').height());

	if(debug) {
		console.log('Color is ' + data.color);
		console.log("circleX: "+ circleX);
		console.log("circleY: "+ circleY);
		console.log('color: '+ data.color);
		console.log('circleDiameter: '+ circleDiameter);
		console.log('#circle-'+ elementIndex);
	}	
	
	$('#circle-'+elementIndex).css({ 'left' : circleX, 'top' : circleY, 'background-color' : data.color }).show().fadeOut(300);
}

function visualizeBar(data, elementIndex) {
	var barPos = 70; // Defined in CSS file
	var barY = 60 + barHeight;
	if(data.input == 'tap') {
		barY = (1 - data.yPos) * 60 + barHeight;
	}
	var newBarPos = barPos - barY + barHeight;
	$('#bar-'+ elementIndex ).animate(
	{
		'height' : barY + '%',
		'top' : newBarPos + '%'
	}, 100).css({ 'background-color' : data.color }).animate(
	{
		'height' : barHeight + '%',
		'top' : barPos + '%'
	}, 300);
	
	if(debug) {
		console.log('Color is ' + data.color);
		console.log("barY: "+ barY);
		console.log('color: '+ data.color);
		console.log('#bar-'+ elementIndex);
	}
}

/*
function visualizeBall(data, elementIndex) {
	var circleX = Math.floor((($(window).width() * 0.2) / (numCircles + 1)) * (elementIndex + 1) + $('.circle').width() * elementIndex);
	var circleY = $(window).height() - $('.circle').height();
	console.log("circleX: "+ circleX);
	console.log("circleY: "+ circleY);
	console.log('color: '+ data.color);
	console.log('circleDiameter:' + circleDiameter);
	var remainder = circleIndex % 2;
	if (remainder == 0) {
		$('#circle-'+elementIndex).css({ 'left' : circleX, 'bottom' : circleY, 'background' : data.color });
		for (var i = 1; i >= 0; i-=0.05) { 
			$('#circle-'+circleIndex).animate(
			{
				'bottom' : 0,
			}, 200, 'swing').animate(
			{
				'bottom' : (circleY),
			}, 200, 'swing');
		} 
		$('#circle-'+elementIndex).animate( { bottom: circleY, }, 200);
	} else {
		$('#circle-'+elementIndex).css({ 'left' : circleX, 'bottom' : 0, 'background' : data.color });
		for (var i = 0; i <= 1; i+=0.05) {
			$('#circle-'+elementIndex).animate(
			{
				'bottom' : (circleY),
			}, 200, 'swing').animate(
			{
				'bottom' : 0,
			}, 200, 'swing');
		}
		$('#circle-'+elementIndex).animate( { bottom: 0, }, 200);
	}
}
*/

</script>